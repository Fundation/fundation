'use strict';

const async          = require('asyncawait/async');
const await          = require('asyncawait/await');
const debug          = require('debug')('fundation');
const debugRoutes    = require('debug')('fundation:controllers');
const fs             = require('fs');
const glob           = require("glob");
const path           = require('path');

const isProdOrStage = ['production', 'staging'].indexOf(process.env.NODE_ENV) >= 0

/**
 * Vue
 *
 * @param {Application} app
 * @api private
 */
module.exports = function(app, fundation) {

  debug("Setting up Vue")

  if (isProdOrStage) {
    // In production: create server renderer using server bundle and index HTML
    // template from real fs.
    // The server bundle is generated by vue-ssr-webpack-plugin.
    const bundle = require(path.resolve(__dirname, '../../../vue-ssr-bundle.json'))
    // src/index.template.html is processed by html-webpack-plugin to inject
    // build assets and output as dist/index.html.
    const template = fs.readFileSync(path.resolve(__dirname, '../../../dist/index.html'), 'utf-8')
    app.renderer = createRenderer(bundle, template)
  } else {
    // In development: setup the dev server with watch and hot-reload,
    // and create a new renderer on bundle / index template update.
    require('../build/setup-dev-server')(app, (bundle, template) => {
      app.renderer = createRenderer(bundle, template)
    })
  }

  function createRenderer (bundle, template) {
    // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
    return require('vue-server-renderer').createBundleRenderer(bundle, {
      template,
      cache: require('lru-cache')({
        max: 1000,
        maxAge: 1000 * 60 * 15
      })
    })
  }

};
